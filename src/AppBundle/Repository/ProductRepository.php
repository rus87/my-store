<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Product;
use AppBundle\Entity\Category;
use Doctrine\ORM\Query;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{
    const PRODUCTS_CLASSES = ['Jacket', 'Sweater', 'Trousers', 'Blouse'];


    /**
     * @param Category $category
     * @param null string $gender
     * @return mixed
     */
    public function getRandom(Category $category, $gender = null)
    {
        $criteria = ['category' => $category];
        if($gender){
            $productsNum = $this->countProductsByGenderAndCategory($gender, $category->getName());
            $criteria['gender'] = $gender;
        }
        else
            $productsNum = $this->getEntityManager()->getRepository("AppBundle:Category")->countProducts($category);
        $product = $this->getEntityManager()->getRepository("AppBundle:Product")->findBy(
            $criteria, null, 1, rand(0, $productsNum - 1))[0];
        return $product;
    }

    /**
     * @param integer $id
     * @return null|object
     */
    public function getById($id)
    {
        $product = null;
        foreach(ProductRepository::PRODUCTS_CLASSES as $className){
            $product = $this->getEntityManager()->getRepository('AppBundle:Products\\'.$className)->find($id);
            if($product) break;
        }
        return $product;
    }



    public function search($search, $productClassName, $orderBy = 'id:ASC', $limit = null, $offset = null)
    {
        $em = $this->getEntityManager();
        $orderByDirection = explode(':', $orderBy)[1];
        $orderByProperty = explode(':', $orderBy)[0];
        $q = "SELECT p FROM AppBundle\Entity\Products\\".ucfirst($productClassName)." p
              WHERE p.title LIKE :search OR p.description LIKE :search
              ORDER BY p.$orderByProperty $orderByDirection";
        $query = $em->createQuery($q);

        $search = "%".$search."%";
        $query->setParameter('search', $search);
        $query->setMaxResults($limit);
        $query->setFirstResult($offset);
        return $query->getResult();
    }

    public function countSearch($search, $productClassName)
    {
        $em = $this->getEntityManager();
        $q = "SELECT COUNT(p.id) FROM AppBundle\Entity\Products\\".ucfirst($productClassName)." p
              WHERE p.title LIKE :search OR p.description LIKE :search";
        $query = $em->createQuery($q);
        $search = "%".$search."%";
        $query->setParameter('search', $search);
        return $query->getSingleScalarResult();
    }

}
